--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=10 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_nma
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[9..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[9..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode782w[1..0]	: WIRE;
	w_anode791w[3..0]	: WIRE;
	w_anode808w[3..0]	: WIRE;
	w_anode818w[3..0]	: WIRE;
	w_anode828w[3..0]	: WIRE;
	w_anode838w[3..0]	: WIRE;
	w_anode848w[3..0]	: WIRE;
	w_anode858w[3..0]	: WIRE;
	w_anode868w[3..0]	: WIRE;
	w_anode880w[1..0]	: WIRE;
	w_anode887w[3..0]	: WIRE;
	w_anode898w[3..0]	: WIRE;
	w_anode908w[3..0]	: WIRE;
	w_anode918w[3..0]	: WIRE;
	w_anode928w[3..0]	: WIRE;
	w_anode938w[3..0]	: WIRE;
	w_anode948w[3..0]	: WIRE;
	w_anode958w[3..0]	: WIRE;
	w_data780w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[9..0] = eq_wire[9..0];
	eq_wire[] = ( ( w_anode958w[3..3], w_anode948w[3..3], w_anode938w[3..3], w_anode928w[3..3], w_anode918w[3..3], w_anode908w[3..3], w_anode898w[3..3], w_anode887w[3..3]), ( w_anode868w[3..3], w_anode858w[3..3], w_anode848w[3..3], w_anode838w[3..3], w_anode828w[3..3], w_anode818w[3..3], w_anode808w[3..3], w_anode791w[3..3]));
	w_anode782w[] = ( (w_anode782w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode791w[] = ( (w_anode791w[2..2] & (! w_data780w[2..2])), (w_anode791w[1..1] & (! w_data780w[1..1])), (w_anode791w[0..0] & (! w_data780w[0..0])), w_anode782w[1..1]);
	w_anode808w[] = ( (w_anode808w[2..2] & (! w_data780w[2..2])), (w_anode808w[1..1] & (! w_data780w[1..1])), (w_anode808w[0..0] & w_data780w[0..0]), w_anode782w[1..1]);
	w_anode818w[] = ( (w_anode818w[2..2] & (! w_data780w[2..2])), (w_anode818w[1..1] & w_data780w[1..1]), (w_anode818w[0..0] & (! w_data780w[0..0])), w_anode782w[1..1]);
	w_anode828w[] = ( (w_anode828w[2..2] & (! w_data780w[2..2])), (w_anode828w[1..1] & w_data780w[1..1]), (w_anode828w[0..0] & w_data780w[0..0]), w_anode782w[1..1]);
	w_anode838w[] = ( (w_anode838w[2..2] & w_data780w[2..2]), (w_anode838w[1..1] & (! w_data780w[1..1])), (w_anode838w[0..0] & (! w_data780w[0..0])), w_anode782w[1..1]);
	w_anode848w[] = ( (w_anode848w[2..2] & w_data780w[2..2]), (w_anode848w[1..1] & (! w_data780w[1..1])), (w_anode848w[0..0] & w_data780w[0..0]), w_anode782w[1..1]);
	w_anode858w[] = ( (w_anode858w[2..2] & w_data780w[2..2]), (w_anode858w[1..1] & w_data780w[1..1]), (w_anode858w[0..0] & (! w_data780w[0..0])), w_anode782w[1..1]);
	w_anode868w[] = ( (w_anode868w[2..2] & w_data780w[2..2]), (w_anode868w[1..1] & w_data780w[1..1]), (w_anode868w[0..0] & w_data780w[0..0]), w_anode782w[1..1]);
	w_anode880w[] = ( (w_anode880w[0..0] & data_wire[3..3]), enable_wire);
	w_anode887w[] = ( (w_anode887w[2..2] & (! w_data780w[2..2])), (w_anode887w[1..1] & (! w_data780w[1..1])), (w_anode887w[0..0] & (! w_data780w[0..0])), w_anode880w[1..1]);
	w_anode898w[] = ( (w_anode898w[2..2] & (! w_data780w[2..2])), (w_anode898w[1..1] & (! w_data780w[1..1])), (w_anode898w[0..0] & w_data780w[0..0]), w_anode880w[1..1]);
	w_anode908w[] = ( (w_anode908w[2..2] & (! w_data780w[2..2])), (w_anode908w[1..1] & w_data780w[1..1]), (w_anode908w[0..0] & (! w_data780w[0..0])), w_anode880w[1..1]);
	w_anode918w[] = ( (w_anode918w[2..2] & (! w_data780w[2..2])), (w_anode918w[1..1] & w_data780w[1..1]), (w_anode918w[0..0] & w_data780w[0..0]), w_anode880w[1..1]);
	w_anode928w[] = ( (w_anode928w[2..2] & w_data780w[2..2]), (w_anode928w[1..1] & (! w_data780w[1..1])), (w_anode928w[0..0] & (! w_data780w[0..0])), w_anode880w[1..1]);
	w_anode938w[] = ( (w_anode938w[2..2] & w_data780w[2..2]), (w_anode938w[1..1] & (! w_data780w[1..1])), (w_anode938w[0..0] & w_data780w[0..0]), w_anode880w[1..1]);
	w_anode948w[] = ( (w_anode948w[2..2] & w_data780w[2..2]), (w_anode948w[1..1] & w_data780w[1..1]), (w_anode948w[0..0] & (! w_data780w[0..0])), w_anode880w[1..1]);
	w_anode958w[] = ( (w_anode958w[2..2] & w_data780w[2..2]), (w_anode958w[1..1] & w_data780w[1..1]), (w_anode958w[0..0] & w_data780w[0..0]), w_anode880w[1..1]);
	w_data780w[2..0] = data_wire[2..0];
END;
--VALID FILE
